"""
Student information for this assignment:

Replace <FULL NAME> with your name.
On my/our honor, Jerry Wang and Allison Nguyen, this
programming assignment is my own work and I have not provided this code to
any other student.

I have read and understand the course syllabus's guidelines regarding Academic
Integrity. I understand that if I violate the Academic Integrity policy (e.g.
copy code from someone else, have the code generated by an LLM, or give my
code to someone else), the case shall be submitted to the Office of the Dean of
Students. Academic penalties up to and including an F in the course are likely.

UT EID 1:jyw342
UT EID 2:ann2464
"""


def group_sum(start, nums, target):
    """
    Given a list of ints, determine if there exists a group of some ints that sum to the
    given target.

    pre: start >= 0, len(nums) >= 0, target >= 0, nums will only contain ints
    post: return True if nums has a group of ints that sum to target, False otherwise
    """
    if target == 0:
        return True
    if start >= len(nums):
        return False
    return group_sum(start + 1, nums, target) or group_sum(start + 1, nums, target - nums[start])

def group_sum_6(start, nums, target):
    """
    Given a list of ints, determine if there exists a group of some ints that sum to the
    given target. Additionally, if there is are 6's present in the array, they must all
    be chosen.

    pre: start >= 0, len(nums) >= 0, target >= 0, nums will only contain ints
    post: return True if nums has a group of ints that sum to target, False otherwise
    """
    if target == 0:
        return True
    if start >= len(nums):
        return False
    if nums[start] == 6:
        return group_sum_6(start + 1, nums, target - nums[start])
    return (group_sum_6(start + 1, nums, target - nums[start]) or
            group_sum_6(start + 1, nums, target))

def group_no_adj(start, nums, target):
    """
    Given a list of ints, determine if there exists a group of some ints that sum to
    the given target. Additionally, if a value is chosen, the value immediately after
    (the value adjacent) cannot be chosen.

    pre: start >= 0, len(nums) >= 0, target >= 0, nums will only contain ints
    post: return True if nums has a group of ints that sum to target, False otherwise
    """
    if target == 0:
        return True
    if start >= len(nums):
        return False
    return (group_no_adj(start + 2, nums, target - nums[start]) or
            group_no_adj(start + 1, nums, target))

def group_sum_5(start, nums, target):
    """
    Given a list of ints, determine if there exists a group of some ints that sum to
    the given target. Additionally, if a multiple of 5 is in the array, it must be included
    If the value immediately following a multiple of 5 if 1, it must not be chosen

    pre: start >= 0, len(nums) >= 0, target >= 0, nums will only contain ints
    post: return True if nums has a group of ints that sum to target, False otherwise
    """
    if target == 0:
        return True
    if start >= len(nums):
        return False

    if nums[start] % 5 == 0:
        next_index = start + 2 if (start + 1 < len(nums) and nums[start + 1] == 1) else start + 1
        return group_sum_5(next_index, nums, target - nums[start])

    return (group_sum_5(start + 1, nums, target - nums[start]) or
            group_sum_5(start + 1, nums, target))


def group_sum_clump(start, nums, target):
    """
    Given a list of ints, determine if there exists a group of some ints that sum to
    the given target. Additionally, if there is a group of identical numbers in succession,
    they must all be chosen, or none of them must be chosen.
    EX: [1, 2, 2, 2, 5, 2], all three of the middle 2's must be chosen, or none of them must be
    chosen to be included in the sum. One loop is allowed to check for identical numbers.

    pre: start >= 0, len(nums) >= 0, target >= 0, nums will only contain ints
    post: return True if nums has a group of ints that sum to target, False otherwise
    """
    if target == 0:
        return True
    if start >= len(nums):
        return False

    clump = nums[start]
    next_index = start + 1
    while next_index < len(nums) and nums[next_index] == nums[start]:
        clump += nums[next_index]
        next_index += 1

    return (group_sum_clump(next_index, nums, target - clump) or
            group_sum_clump(next_index, nums, target))

def split_array(nums):
    """
    Given a list of ints, determine if the numbers can be split evenly into two groups
    The sum of these two groups must be equal
    Write a recursive helper to call from this function

    pre: len(nums) >= 0, nums will only contain ints
    post: return True if nums can be split, False otherwise
    """
    if sum(nums) % 2 != 0:
        return False

    def helper(start, target):
        if target == 0:
            return True
        if start >= len(nums) or target < 0:
            return False
        return helper(start + 1, target - nums[start]) or helper(start + 1, target)

    return helper(0, sum(nums) // 2)

def split_odd_10(nums):
    """
    Given a list of ints, determine if the numbers can be split evenly into two groups
    The sum of one group must be odd, while the other group must be a multiple of 10
    Write a recursive helper to call from this function

    pre: len(nums) >= 0, nums will only contain ints
    post: return True if nums can be split, False otherwise
    """
    def helper(start, sum_10, sum_odd):
        if start >= len(nums):
            return sum_10 % 10 == 0 and sum_odd % 2 == 1
        return (helper(start + 1, sum_10 + nums[start], sum_odd) or
                helper(start + 1, sum_10, sum_odd + nums[start]))

    return helper(0, 0, 0)

def split_53(nums):
    """
    Given a list of ints, determine if the numbers can be split evenly into two groups
    The sum of these two groups must be equal
    Additionally, all multiples of 5 must be in one group, and all multiples of 3 (and not 5)
    must be in the other group
    Write a recursive helper to call from this function

    pre: len(nums) >= 0, nums will only contain ints
    post: return True if nums can be split, False otherwise
    """
    def helper(start, five, three):
        if start >= len(nums):
            return five == three
        if nums[start] % 5 == 0:
            return helper(start + 1, five + nums[start], three)
        if nums[start] % 3 == 0:
            return helper(start + 1, five, three + nums[start])
        return (helper(start + 1, five + nums[start], three) or
                helper(start + 1, five, three + nums[start]))

    return helper(0, 0, 0)
